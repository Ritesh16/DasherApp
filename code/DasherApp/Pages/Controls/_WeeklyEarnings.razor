@inject IReportService reportService

<div>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">From</th>
                <th scope="col">To</th>
                <th scope="col">Amount</th>
            </tr>
        </thead>
        <tbody>
            @if (isLoading)
            {
                <div class="centered">
                    <img src="images/loading.gif" />
                </div>
            }
            else
            {
                @foreach (var week in weeklyPaginationList)
                {
                    <tr>
                        <td>
                            @week.WeekId
                        </td>
                        <td>
                            @week.StartDate.ToShortDateString()
                        </td>
                        <td>
                            @week.EndDate.ToShortDateString()
                        </td>
                        <td>
                            @week.Total.ToString("C2")
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@if (weeklyPaginationList != null && weeklyPaginationList.Count > 0)
{
    <div style="text-align:center">
        <div>
            <ul class="pagination">
                <li class="page-item disabled">
                    <a class="page-link" href="#">&laquo;</a>
                </li>
                @for (int i = 0; i < weeklyPaginationList.TotalPages; i++)
                {
                    var index = i + 1;
                    <li class="page-item @(weeklyPaginationList.CurrentPage == (i+1) ? "active" : "")">
                        <a class="page-link" @onclick="() => GoToPage(index)">@index</a>
                    </li>
                }
                <li class="page-item  @(weeklyPaginationList.CurrentPage == weeklyPaginationList.TotalPages ? "disabled" : "")">
                    <a class="page-link" @onclick="() => GoToPage((weeklyPaginationList.CurrentPage+1))">&raquo;</a>
                </li>
            </ul>
        </div>
    </div>

}

@code {
    bool successVisible = false;
    bool failureVisible = false;
    bool isLoading = false;
    PagedListModel<WeeklyReportModel> weeklyPaginationList;

    IEnumerable<WeeklyReportModel> weeklyEarnings = new List<WeeklyReportModel>();


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        weeklyEarnings = await reportService.GetWeeklyReports();
        weeklyPaginationList = PagedListModel<WeeklyReportModel>.Create(weeklyEarnings, 1, 10);
        isLoading = false;
    }

    public void GoToPage(int page)
    {
        isLoading = true;
        weeklyPaginationList = PagedListModel<WeeklyReportModel>.Create(weeklyEarnings, page, 10);
        isLoading = false;
    }
}