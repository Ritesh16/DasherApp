@inject IReportService reportService

<EditForm Model="YearFilterModel" OnValidSubmit="Search">
    <div class="row">
        <div class="col-2">
            <label>Choose by Year</label>
        </div>
        <div class="col-3">
            <InputSelect @bind-Value="@YearFilterModel.Year" class="form-control">
                <option value="0">
                    --ALL--
                </option>
                @foreach (var y in Years)
                {
                    <option value="@y">@y</option>
                }

            </InputSelect>
        </div>
        <div class="col-3">
            <button class="btn btn-danger">Search</button>
        </div>
    </div>
</EditForm>
<div>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Month</th>
                <th scope="col">Year</th>
                <th scope="col">Amount</th>
            </tr>
        </thead>
        <tbody>
            @if (isLoading)
            {
                <div class="centered">
                    <img src="images/loading.gif" />
                </div>
            }
            else
            {
                @foreach (var monthlyEarning in monthlyEarnings)
                {
                    <tr>
                        <td>
                            @monthlyEarning.MonthName
                        </td>
                        <td>
                            @monthlyEarning.Year
                        </td>
                        <td>
                            @monthlyEarning.Amount.ToString("C2")
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    bool successVisible = false;
    bool failureVisible = false;
    bool isLoading = false;

    public YearFilterModel YearFilterModel { get; set; } = new YearFilterModel();

    IEnumerable<MonthlyReportModel> monthlyEarnings = new List<MonthlyReportModel>();

    [Parameter]
    public IEnumerable<int> Years { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData(DateTime.Now.Year);
    }

    public async Task Search()
    {
        await LoadData(YearFilterModel.Year);
    }

    public async Task LoadData(int year)
    {
        isLoading = true;
        monthlyEarnings = await reportService.GetMonthlyReports(year);
        isLoading = false;
    }
}