@page "/Reports/Generate"

@inject IJSRuntime JSRuntime
@inject ILocationService _locationService
@inject IReportService _reportService
@using DasherApp.Extensions

<h2>Generate Report For Taxes</h2>
<hr/>

<Alert Color="Color.Success" @bind-Visible="@successVisible">
    <AlertMessage>
        @message
    </AlertMessage>
</Alert>

<Alert Color="Color.Danger" @bind-Visible="@failureVisible">
    <AlertMessage>
        @message
    </AlertMessage>
</Alert>

<EditForm Model="FilterModel" OnValidSubmit="GenerateReport">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-2">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <DatePicker @ref="@dashFromDateTimePicker" TValue="DateTime" @bind-Date="FilterModel.FromDate" />
                </Addon>
                <Addon AddonType="AddonType.End">
                    <Button Color="Color.Light" Clicked="@(()=>dashFromDateTimePicker.ToggleAsync())">
                        <Icon Name="IconName.CalendarDay" />
                    </Button>
                </Addon>
            </Addons>
            <ValidationMessage For="()=>FilterModel.FromDate"></ValidationMessage>
        </div>
        <div class="col-2">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <DatePicker @ref="@dashToDateTimePicker" TValue="DateTime" @bind-Date="FilterModel.ToDate" />
                </Addon>
                <Addon AddonType="AddonType.End">
                    <Button Color="Color.Light" Clicked="@(()=>dashToDateTimePicker.ToggleAsync())">
                        <Icon Name="IconName.CalendarDay" />
                    </Button>
                </Addon>
            </Addons>
            <ValidationMessage For="()=>FilterModel.ToDate"></ValidationMessage>
        </div>
        <div class="col-2">
            <InputSelect @bind-Value="FilterModel.Location" class="form-control">
                <option value="All">
                    --ALL--
                </option>
                @foreach (var location in locations)
                {
                    <option value="@location">@location</option>
                }
            </InputSelect>
            <ValidationMessage For="()=>FilterModel.Location"></ValidationMessage>
        </div>
        <div class="col-3">
            <button class="btn btn-danger">Generate Report</button>
        </div>

    </div>


</EditForm>

@code {
    bool successVisible = false;
    bool failureVisible = false;
    string message = string.Empty;
    DatePicker<DateTime> dashFromDateTimePicker;
    DatePicker<DateTime> dashToDateTimePicker;

    IEnumerable<string> locations = new List<string>();

    public FilterModel FilterModel { get; set; } = new FilterModel(new DateTime(DateTime.Now.Year, 1, 1));

    protected async override Task OnInitializedAsync()
    {
        locations = await _locationService.GetLocations();
    }

    public async Task GenerateReport()
    {
        try
        {
            var dailyDashList = await _reportService.GetDailyDashReport(FilterModel);
            var csvData = dailyDashList.ToCsvData();
            await DownloadFile(csvData);
            successVisible = true;
            failureVisible = false;
            message = $"Report generated successfully from {FilterModel.FromDate.ToString("MMM-dd-yyyy")} to {FilterModel.ToDate.ToString("MMM-dd-yyyy")} for {FilterModel.Location} location(s).";
        }
        catch(Exception ex)
        {
            successVisible = false;
            failureVisible = true;
            message = ex.Message;
        }
    }


    private async Task DownloadFile(string data)
    {
        await JSRuntime.InvokeAsync<object>("saveFile", "Mileage Log.csv", data);
    }
}