@page "/Reports/statistics"
@inject ILocationService _locationService
@inject IStatisticsService _statisticsService
@using DasherApp.Pages.Controls

<h1>Statistics</h1>

<EditForm Model="FilterModel" OnValidSubmit="Search">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-3">
            <input type="checkbox" bind="@FilterModel.SearchWithoutDates" @oninput="CheckboxChanged" checked="checked" />
            <span>Search Without Dates</span>
        </div>
        <div class="col-2">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <DatePicker @ref="@dashFromDateTimePicker" TValue="DateTime" @bind-Date="FilterModel.FromDate" Disabled="@FilterModel.SearchWithoutDates" />
                </Addon>
                <Addon AddonType="AddonType.End">
                    <Button Color="Color.Light" Clicked="@(()=>dashFromDateTimePicker.ToggleAsync())" Disabled="@FilterModel.SearchWithoutDates">
                        <Icon Name="IconName.CalendarDay" />
                    </Button>
                </Addon>
            </Addons>
            <ValidationMessage For="()=>FilterModel.FromDate"></ValidationMessage>
        </div>
        <div class="col-2">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <DatePicker @ref="@dashToDateTimePicker" TValue="DateTime" @bind-Date="FilterModel.ToDate" Disabled="@FilterModel.SearchWithoutDates" />
                </Addon>
                <Addon AddonType="AddonType.End">
                    <Button Color="Color.Light" Clicked="@(()=>dashToDateTimePicker.ToggleAsync())" Disabled="@FilterModel.SearchWithoutDates">
                        <Icon Name="IconName.CalendarDay" />
                    </Button>
                </Addon>
            </Addons>
            <ValidationMessage For="()=>FilterModel.ToDate"></ValidationMessage>
        </div>
        <div class="col-2">
            <InputSelect @bind-Value="FilterModel.Location" class="form-control">
                <option value="All">
                    --ALL--
                </option>
                @foreach (var location in locations)
                {
                    <option value="@location">@location</option>
                }
            </InputSelect>
            <ValidationMessage For="()=>FilterModel.Location"></ValidationMessage>
        </div>
        <div class="col-3">
            <button class="btn btn-danger">Search</button>
        </div>

    </div>


</EditForm>
<hr />
<div>
    <div class="row">
        <div class="col-3">
            <div class="card" style="width: 18rem; margin:2px">
                <div class="card-body">
                    <h5 class="card-title">Total Earned</h5>
                    <p class="card-text">@StatisticsModel.TotalEarned.ToString("C2")</p>
                </div>
            </div>
        </div>
        <div class="col-3">
            <div class="card" style="width: 18rem; margin:2px">
                <div class="card-body">
                    <h5 class="card-title">Total Mileage</h5>

                    <p class="card-text">@StatisticsModel.TotalMileage mi</p>
                </div>
            </div>
        </div>
        <div class="col-3">
            <div class="card" style="width: 18rem; margin:2px">
                <div class="card-body">
                    <h5 class="card-title">Highest Earning Day</h5>
                    @if (StatisticsModel.HighestEarningDay.Date != DateTime.MinValue)
                    {
                        <span style="text-align:left">
                            @StatisticsModel.HighestEarningDay.Date.ToShortDateString()
                        </span>
                        <span style="text-align:right; margin-left:45%">
                            @StatisticsModel.HighestEarningDay.Value.ToString("C2")
                        </span>
                    }
                    else
                    {
                        <p>$0</p>
                    }
                </div>
            </div>
        </div>
        <div class="col-3">
            <div class="card" style="width: 18rem; margin:2px">
                <div class="card-body">
                    <h5 class="card-title">Highest Mileage</h5>
                    @if (StatisticsModel.HighestMileageDay.Date != DateTime.MinValue)
                    {
                        <span style="text-align:left">
                            @StatisticsModel.HighestMileageDay.Date.ToShortDateString()
                        </span>
                        <span style="text-align:right; margin-left:35%">
                            @StatisticsModel.HighestMileageDay.Value (miles)
                        </span>
                    }
                    else
                    {
                        <p>0 miles</p>
                    }
                </div>
            </div>
        </div>
        <div class="col-3">
            <div class="card" style="width: 18rem; margin:2px">
                <div class="card-body">
                    <h5 class="card-title">Hourly Rate</h5>
                    <p class="card-text">@StatisticsModel.HourlyRate.ToString("C2")</p>
                </div>
            </div>
        </div>
        <div class="col-3">
            <div class="card" style="width: 18rem; margin:2px">
                <div class="card-body">
                    <h5 class="card-title">Highest Dash</h5>
                    @if (StatisticsModel.HighestDashDay.Date != DateTime.MinValue)
                    {
                        <span style="text-align:left">
                            @StatisticsModel.HighestDashDay.Date.ToShortDateString()
                        </span>
                        <span style="text-align:right; margin-left:45%">
                            @StatisticsModel.HighestDashDay.Value.ToString("C2")
                        </span>
                    }
                    else
                    {
                        <p>$0</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<div style="margin-top:10px">
    <h2>Week days Earning</h2>
</div>
<hr />
<div>
    <div class="row">
        <div class="col-2">
            <_WeekDayStatistics WeekDay="@Monday" Day="Monday"></_WeekDayStatistics>
        </div>
        <div class="col-2">
            <_WeekDayStatistics WeekDay="@Tuesday" Day="Tuesday"></_WeekDayStatistics>
        </div>
        <div class="col-2">
            <_WeekDayStatistics WeekDay="@Wednesday" Day="Wednesday"></_WeekDayStatistics>
        </div>
        <div class="col-2">
            <_WeekDayStatistics WeekDay="@Thursday" Day="Thursday"></_WeekDayStatistics>
        </div>
        <div class="col-2">
            <_WeekDayStatistics WeekDay="@Friday" Day="Friday"></_WeekDayStatistics>
        </div>
        <div class="col-2">
            <_WeekDayStatistics WeekDay="@Saturday" Day="Saturday"></_WeekDayStatistics>
        </div>
        <div class="col-2">
            <_WeekDayStatistics WeekDay="@Sunday" Day="Sunday"></_WeekDayStatistics>
        </div>
    </div>
</div>

@code {
    DatePicker<DateTime> dashFromDateTimePicker;
    DatePicker<DateTime> dashToDateTimePicker;

    IEnumerable<string> locations = new List<string>();
    public FilterModel FilterModel { get; set; } = new FilterModel();

    public StatisticsModel StatisticsModel { get; set; } = new();

    public WeekDayEarningModel Monday { get; set; }
    public WeekDayEarningModel Tuesday { get; set; }
    public WeekDayEarningModel Wednesday { get; set; }
    public WeekDayEarningModel Thursday { get; set; }
    public WeekDayEarningModel Friday { get; set; }
    public WeekDayEarningModel Saturday { get; set; }
    public WeekDayEarningModel Sunday { get; set; }


    protected async override Task OnInitializedAsync()
    {
        locations = await _locationService.GetLocations();
        await LoadData();
    }

    private void CheckboxChanged(ChangeEventArgs e)
    {
        // get the checkbox state
        FilterModel.SearchWithoutDates = (bool)e.Value;
    }
    public async Task Search()
    {
        await LoadData();
    }

    public async Task LoadData()
    {
        StatisticsModel.TotalEarned = await _statisticsService.GetTotalEarned(FilterModel);
        StatisticsModel.TotalMileage = await _statisticsService.GetTotalMileage(FilterModel);
        StatisticsModel.HighestEarningDay = await _statisticsService.GetHighestEarningDay(FilterModel);
        StatisticsModel.HourlyRate = await _statisticsService.GetHourlyRate(FilterModel);
        StatisticsModel.HighestMileageDay = await _statisticsService.GetHighestMileageDay(FilterModel);
        StatisticsModel.HighestDashDay = await _statisticsService.GetHighestDash(FilterModel);
        StatisticsModel.WeekDayEarnings = await _statisticsService.GetWeekDayEarning(FilterModel);

        Monday = StatisticsModel.WeekDayEarnings.FirstOrDefault(x => x.DayOfWeek == DayOfWeek.Monday);
        Tuesday = StatisticsModel.WeekDayEarnings.FirstOrDefault(x => x.DayOfWeek == DayOfWeek.Tuesday);
        Wednesday = StatisticsModel.WeekDayEarnings.FirstOrDefault(x => x.DayOfWeek == DayOfWeek.Wednesday);
        Thursday = StatisticsModel.WeekDayEarnings.FirstOrDefault(x => x.DayOfWeek == DayOfWeek.Thursday);
        Friday = StatisticsModel.WeekDayEarnings.FirstOrDefault(x => x.DayOfWeek == DayOfWeek.Friday);
        Saturday = StatisticsModel.WeekDayEarnings.FirstOrDefault(x => x.DayOfWeek == DayOfWeek.Saturday);
        Sunday = StatisticsModel.WeekDayEarnings.FirstOrDefault(x => x.DayOfWeek == DayOfWeek.Sunday);

    }
}
